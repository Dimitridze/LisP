(defun rep (lst w r)
  (let ((res nil))
    (iter (for x in lst)
      (cond ((equal x w) (collecting r into res))
            ((listp x) (collecting (rep x w r) into res))
            (t (collecting x into res))))))
            
            (defun rep (lst w r)
  (cond ((null lst) nil)
        (( eq (car lst) w) (cons r (rep (cdr lst) w r)))
        ((listp (car lst)) (cons (rep (car lst) w r) (rep (cdr lst) w r)))
        (t (cons (car lst) (rep (cdr lst) w r))))) 
