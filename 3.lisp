(defun zam (lst w r)
    ((lambda (first rest)
        (cond ((null lst) nil)
        (( eq first w) (cons r (zam rest w r)))
        ((listp first) (cons (zam first w r) (zam rest w r)))
        (t (cons first (zam rest w r))))
     )
     
     (car lst)(cdr lst)
   )
)
        
 1) ( print (rep '(1 2 3 1 1) 1 'a) )
    (A 2 3 A A) 
2)  ( print (rep '((1 2 3) 4 5 6 1) 1 44) )
    ((44 2 3) 4 5 6 44)
